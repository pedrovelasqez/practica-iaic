/*
 * PrincipalView.java
 */

package vista;

import java.awt.AlphaComposite;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.SplashScreen;
import java.awt.Toolkit;
import java.util.ArrayList;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JTextArea;
import modelo.micromundo.Estadisticas;
import modelo.micromundo.Micromundo;
import observador.Observador;

/**
 * The application's main frame.
 */
public class PrincipalView extends FrameView implements Observador{

    public PrincipalView(SingleFrameApplication app, Micromundo micromundo) {
        super(app);

        _micromundo=micromundo;

        //ThreadSplash sp = new ThreadSplash();
        //sp.run();

        initComponents();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();

        getFrame().setIconImage(resourceMap.getImageIcon("aplicacion.icon").getImage());

        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });

        status("Bienvenido al micromundo del Sistema Planetario");

    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = Principal.getApplication().getMainFrame();
            aboutBox = new PrincipalAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        Principal.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        panelUniverso = new ImagenFondoPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        _log = new javax.swing.JTextArea();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        jToolBar1 = new javax.swing.JToolBar();
        _continuo = new javax.swing.JButton();
        _pasoApaso = new javax.swing.JButton();
        _botonestadisticas = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        _algoritmo = new javax.swing.JComboBox();

        mainPanel.setMaximumSize(new java.awt.Dimension(4000, 4000));
        mainPanel.setMinimumSize(new java.awt.Dimension(400, 400));
        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.setPreferredSize(new java.awt.Dimension(793, 424));
        mainPanel.setLayout(new javax.swing.BoxLayout(mainPanel, javax.swing.BoxLayout.LINE_AXIS));

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setName("jSplitPane1"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(vista.Principal.class).getContext().getResourceMap(PrincipalView.class);
        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jScrollPane1.border.title"))); // NOI18N
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setName("jScrollPane1"); // NOI18N

        panelUniverso.setMaximumSize(new java.awt.Dimension(1794, 1142));
        panelUniverso.setMinimumSize(new java.awt.Dimension(1794, 1142));
        panelUniverso.setName("panelUniverso"); // NOI18N
        panelUniverso.setPreferredSize(new java.awt.Dimension(1794, 1142));

        javax.swing.GroupLayout panelUniversoLayout = new javax.swing.GroupLayout(panelUniverso);
        panelUniverso.setLayout(panelUniversoLayout);
        panelUniversoLayout.setHorizontalGroup(
            panelUniversoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1794, Short.MAX_VALUE)
        );
        panelUniversoLayout.setVerticalGroup(
            panelUniversoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1142, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(panelUniverso);

        jSplitPane1.setTopComponent(jScrollPane1);
        jScrollPane1.getAccessibleContext().setAccessibleParent(jSplitPane1);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jScrollPane2.border.title"))); // NOI18N
        jScrollPane2.setName("jScrollPane2"); // NOI18N

        _log.setBackground(resourceMap.getColor("_log.background")); // NOI18N
        _log.setColumns(20);
        _log.setRows(5);
        _log.setName("_log"); // NOI18N
        jScrollPane2.setViewportView(_log);

        jSplitPane1.setRightComponent(jScrollPane2);

        mainPanel.add(jSplitPane1);

        menuBar.setMinimumSize(new java.awt.Dimension(62, 25));
        menuBar.setName("menuBar"); // NOI18N
        menuBar.setPreferredSize(new java.awt.Dimension(62, 25));

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(vista.Principal.class).getContext().getActionMap(PrincipalView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setText(resourceMap.getString("exitMenuItem.text")); // NOI18N
        exitMenuItem.setToolTipText(resourceMap.getString("exitMenuItem.toolTipText")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setText(resourceMap.getString("aboutMenuItem.text")); // NOI18N
        aboutMenuItem.setToolTipText(resourceMap.getString("aboutMenuItem.toolTipText")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setMinimumSize(new java.awt.Dimension(793, 30));
        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 793, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 623, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        jToolBar1.setRollover(true);
        jToolBar1.setName("jToolBar1"); // NOI18N

        _continuo.setIcon(resourceMap.getIcon("_continuo.icon")); // NOI18N
        _continuo.setText(resourceMap.getString("_continuo.text")); // NOI18N
        _continuo.setAlignmentX(0.2F);
        _continuo.setFocusable(false);
        _continuo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        _continuo.setMargin(new java.awt.Insets(0, 0, 0, 0));
        _continuo.setMaximumSize(new java.awt.Dimension(80, 80));
        _continuo.setMinimumSize(new java.awt.Dimension(80, 80));
        _continuo.setName("_continuo"); // NOI18N
        _continuo.setPreferredSize(new java.awt.Dimension(80, 80));
        _continuo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        _continuo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ejecutarCompleto(evt);
            }
        });
        jToolBar1.add(_continuo);

        _pasoApaso.setIcon(resourceMap.getIcon("_pasoApaso.icon")); // NOI18N
        _pasoApaso.setAlignmentX(0.2F);
        _pasoApaso.setFocusable(false);
        _pasoApaso.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        _pasoApaso.setLabel(resourceMap.getString("_pasoApaso.label")); // NOI18N
        _pasoApaso.setMargin(new java.awt.Insets(0, 0, 0, 0));
        _pasoApaso.setMaximumSize(new java.awt.Dimension(80, 80));
        _pasoApaso.setMinimumSize(new java.awt.Dimension(80, 80));
        _pasoApaso.setName("_pasoApaso"); // NOI18N
        _pasoApaso.setPreferredSize(new java.awt.Dimension(80, 80));
        _pasoApaso.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        _pasoApaso.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ejecutarPasoAPaso(evt);
            }
        });
        jToolBar1.add(_pasoApaso);

        _botonestadisticas.setIcon(resourceMap.getIcon("_botonestadisticas.icon")); // NOI18N
        _botonestadisticas.setAlignmentX(0.2F);
        _botonestadisticas.setFocusable(false);
        _botonestadisticas.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        _botonestadisticas.setLabel(resourceMap.getString("_botonestadisticas.label")); // NOI18N
        _botonestadisticas.setMargin(new java.awt.Insets(0, 0, 0, 0));
        _botonestadisticas.setMaximumSize(new java.awt.Dimension(80, 80));
        _botonestadisticas.setMinimumSize(new java.awt.Dimension(80, 80));
        _botonestadisticas.setName("_botonestadisticas"); // NOI18N
        _botonestadisticas.setPreferredSize(new java.awt.Dimension(80, 80));
        _botonestadisticas.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        _botonestadisticas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                mostrarEstadisticas(evt);
            }
        });
        jToolBar1.add(_botonestadisticas);

        jButton4.setIcon(resourceMap.getIcon("jButton4.icon")); // NOI18N
        jButton4.setText(resourceMap.getString("jButton4.text")); // NOI18N
        jButton4.setAlignmentX(0.2F);
        jButton4.setFocusable(false);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButton4.setMaximumSize(new java.awt.Dimension(80, 80));
        jButton4.setMinimumSize(new java.awt.Dimension(80, 80));
        jButton4.setName("jButton4"); // NOI18N
        jButton4.setPreferredSize(new java.awt.Dimension(80, 80));
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                reiniciar(evt);
            }
        });
        jToolBar1.add(jButton4);

        jButton5.setIcon(resourceMap.getIcon("jButton5.icon")); // NOI18N
        jButton5.setText(resourceMap.getString("jButton5.text")); // NOI18N
        jButton5.setAlignmentX(0.2F);
        jButton5.setFocusable(false);
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton5.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButton5.setMaximumSize(new java.awt.Dimension(80, 80));
        jButton5.setMinimumSize(new java.awt.Dimension(80, 80));
        jButton5.setName("jButton5"); // NOI18N
        jButton5.setPreferredSize(new java.awt.Dimension(80, 80));
        jButton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                salir(evt);
            }
        });
        jToolBar1.add(jButton5);

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        jToolBar1.add(jLabel1);

        _algoritmo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Busqueda Voraz", "Algoritmo A*", "Primero en anchura" }));
        _algoritmo.setAlignmentX(0.0F);
        _algoritmo.setMaximumSize(new java.awt.Dimension(145, 25));
        _algoritmo.setMinimumSize(new java.awt.Dimension(145, 25));
        _algoritmo.setName("_algoritmo"); // NOI18N
        _algoritmo.setPreferredSize(new java.awt.Dimension(145, 25));
        jToolBar1.add(_algoritmo);

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
        setToolBar(jToolBar1);
    }// </editor-fold>//GEN-END:initComponents

    private void ejecutarCompleto(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ejecutarCompleto

        _pasoApaso.setEnabled(false);
        _continuo.setEnabled(false);
        _botonestadisticas.setEnabled(false);
        if(!_iniciado){
            _iniciado=true;
            dameLog().setText("");
            //agregar opcion elegida
            _micromundo.solucionar(dameAlgoritmo());
            _micromundo.start();
        }

        status("Buscando mundo con niveles de oxigeno y agua adecuados para vivir");

        mainPanel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

        statusAnimationLabel.setIcon(busyIcons[0]);
        busyIconIndex = 0;
        busyIconTimer.start();
        progressBar.setVisible(true);
        progressBar.setIndeterminate(true);

    }//GEN-LAST:event_ejecutarCompleto

    private void ejecutarPasoAPaso(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ejecutarPasoAPaso

        if(!_iniciado){
            _pasoApaso.setText("Siguiente");
            _continuo.setEnabled(false);
            _botonestadisticas.setEnabled(false);
            _iniciado=true;
            dameLog().setText("");
            //agregar opcion elegida
            _micromundo.solucionar(dameAlgoritmo());
            _micromundo.pasoApaso();
            _micromundo.start();
        }
        _micromundo.siguiente();

        status("Planeta recorrido");
    }//GEN-LAST:event_ejecutarPasoAPaso

    private void mostrarEstadisticas(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mostrarEstadisticas

        getFrame().setAlwaysOnTop(false);
        _micromundo.muestraEstadisticas();

        status("Estadisticas activas");
    }//GEN-LAST:event_mostrarEstadisticas

    private void salir(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_salir

        System.exit(busyIconIndex);
    }//GEN-LAST:event_salir

    private void reiniciar(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reiniciar

        _pasoApaso.setEnabled(true);
		_continuo.setEnabled(true);
		_botonestadisticas.setEnabled(true);
		_iniciado=false;
		_micromundo=new Micromundo();
		_micromundo.setObserver(this);
		Estadisticas.dameInstancia().setObserver(this);
        status("Busqueda finalizada");
        mainPanel.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        busyIconTimer.stop();
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);
        progressBar.setValue(0);
    }//GEN-LAST:event_reiniciar

    private void status(String s) {

        statusMessageLabel.setText(s);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox _algoritmo;
    private javax.swing.JButton _botonestadisticas;
    private javax.swing.JButton _continuo;
    private javax.swing.JTextArea _log;
    private javax.swing.JButton _pasoApaso;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JPanel panelUniverso;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;
    private VentanaComparativaGraficas _estadisticas;
    private JDialog aboutBox;
    private boolean _iniciado=false;
    private Micromundo _micromundo;

    public JTextArea dameLog(){
		if(_log==null){
			_log=new JTextArea();
			_log.setEditable(false);
			_log.setText("LOG");
		}
		return _log;
	}

	public void conectaPlanetas(int planeta1, int planeta2, int tipo) {


	}

	public void escribeLog(String datos) {
        
		dameLog().append(datos+"\n");
	}

	public void estadisticas(ArrayList<Integer> real, ArrayList<Integer> heuristica) {
		if(_estadisticas!=null){
			_estadisticas.setVisible(false);
		}
		_estadisticas=new VentanaComparativaGraficas(real, heuristica);
	}

	public void posicionarNave(int numeroPlaneta) {


	}

	public void reiniciar(){
		_pasoApaso.setEnabled(true);
		_continuo.setEnabled(true);
		_botonestadisticas.setEnabled(true);
		_iniciado=false;
		_micromundo=new Micromundo();
		_micromundo.setObserver(this);
		Estadisticas.dameInstancia().setObserver(this);
        status("Busqueda finalizada");
        mainPanel.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        busyIconTimer.stop();
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);
        progressBar.setValue(0);

	}

	public int dameAlgoritmo(){
		if(_algoritmo.getSelectedItem().equals("Busqueda Voraz")){
			return 0;
		}else if(_algoritmo.getSelectedItem().equals("Algoritmo A*")){
			return 1;
		}else if(_algoritmo.getSelectedItem().equals("Primero en anchura")){
			return 2;
		}
		return -1;
	}

    void renderSplashFrame(Graphics2D g, int frame) {
            final String[] comps = {"Modulo de Inteligencia Artificial", "Micromundo del Sistema Planetario", "Algoritmos de busqueda", "Interfaz Grafica"};
            g.setComposite(AlphaComposite.Clear);
            // Se obtienen las dimensiones en pixels de la pantalla.
            Dimension pantalla = Toolkit.getDefaultToolkit().getScreenSize();

            int x=(pantalla.width) / 2;
            int y=(pantalla.height) / 2;

            if(pantalla.width<1024){
                x=pantalla.width-200;
                y=pantalla.height-200;
            }

            g.fillRect(x-10,y-20,280,40);
            g.setPaintMode();
            g.setColor(Color.BLACK);

            g.drawString("Cargando "+comps[(frame/5)%4]+"...", x, y);
            g.fillRect(x,y+20,(frame*18)%280,20);
        }

    public class ThreadSplash extends Thread {
        public ThreadSplash() {

        }
        public void run() {

            final SplashScreen splash = SplashScreen.getSplashScreen();
            if (splash == null) {
                System.out.println("SplashScreen.getSplashScreen() returned null");
            }
            Graphics2D g = (Graphics2D)splash.createGraphics();
            if (g == null) {
                System.out.println("g is null");
            }
            for(int i=0; i<20; i++) {
                renderSplashFrame(g, i);
                splash.update();
                try {
                    Thread.sleep(200);
                }
                catch(InterruptedException e) {
                }
            }
            splash.close();

        }
    }

    public class ImagenFondoPanel extends javax.swing.JPanel {
     private Image imgFondo;

     public ImagenFondoPanel() {
      preInit();
      initComponents();
     }

     private void initComponents() {
     }

     private void preInit(){

         ResourceMap resourceMap = getResourceMap();

         imgFondo = resourceMap.getImageIcon("aplicacion.universo").getImage();
     }

     protected void paintComponent(Graphics g) {
      g.drawImage(imgFondo,0,0,null);
     }
    }
}
